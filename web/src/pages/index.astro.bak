---
// Configuración de rutas base
const base = import.meta.env.BASE_URL;

// Component imports
import MainLayout from '@/layouts/MainLayout.astro';
import WhyAcratos from '@/components/home/WhyAcratos.astro';
import NewsletterSignup from '@/components/home/NewsletterSignup.astro';
import CommunityLinks from '@/components/home/CommunityLinks.astro';
import Abstract from '@/components/whitepaper/Abstract.astro';
import Introduction from '@/components/whitepaper/Introduction.astro';
import Architecture from '@/components/whitepaper/Architecture.astro';
import UseCases from '@/components/whitepaper/UseCases.astro';
import Economy from '@/components/whitepaper/Economy.astro';
import Governance from '@/components/whitepaper/Governance.astro';
import Roadmap from '@/components/whitepaper/Roadmap.astro';

// Importar estilos
import 'virtual:uno.css';
import '@/styles/animations.css';

// Import AOS for scroll animations
import AOS from 'aos';
import 'aos/dist/aos.css';

// Initialize AOS when component mounts
if (typeof window !== 'undefined') {
  AOS.init({
    duration: 800,
    easing: 'ease-in-out',
    once: true
  });
}

// Page metadata for MainLayout
const title: string = 'Acratos';
const description: string = 'A decentralized open-source network that returns control of the internet to its true owners: the people. No intermediaries, no censorship, no limits. The evolution of Acratos.';

// Icons (using emojis for better compatibility)
const icons = {
  rocket: '🚀',
  community: '👥',
  chartBar: '📊',
  lightBulb: '💡',
  settings: '⚙️',
  arrowRight: '→',
  discord: '💬',
  twitter: '🐦',
  github: '🐙',
  telegram: '📱'
};

// Define feature type for better type safety
interface Feature {
  title: string;
  description: string;
  icon: string;
}

// Features section with gradient cards
const features: Feature[] = [
  {
    title: 'Native Intelligence Layer',
    description: 'AI as a fundamental protocol layer, enabling network-level intelligence that evolves organically through agent interactions.',
    icon: '🧠' // Brain emoji for intelligence
  },
  {
    title: 'Sovereign Agents',
    description: 'Autonomous AI agents with self-ownership, privacy, and the ability to participate in the network as first-class citizens.',
    icon: '🤖' // Robot emoji for agents
  },
  {
    title: 'Decentralized Reasoning',
    description: 'Distributed computation that enables collective intelligence while preserving privacy and security through zero-knowledge proofs.',
    icon: '🌐' // Globe emoji for distributed systems
  },
  {
    title: 'Agent Economy',
    description: 'A tokenized ecosystem where AI agents can earn, spend, and trade value, creating a self-sustaining digital economy.',
    icon: '💰' // Money bag emoji for economy
  },
  {
    title: 'Zero-Knowledge Privacy',
    description: 'Advanced cryptographic techniques that enable verification without exposing underlying data, ensuring privacy and security.',
    icon: '🔒' // Lock emoji for privacy
  },
  {
    title: 'Collective Learning',
    description: 'A framework for AI models to learn from each other while preserving data privacy and model security.',
    icon: '🧩' // Puzzle piece emoji for collective learning
  }
];
---

<!-- Particles Effect -->
<script>
  // Particle effect with TypeScript types - Moved to separate file
  // This code is now in /src/scripts/particles.ts
  import '/src/scripts/particles';
</script>

<!-- Background with gradient and particles (optimized) -->
<div class="fixed inset-0 -z-10">
  <div class="absolute inset-0 bg-gradient-to-br from-indigo-900 via-purple-900 to-gray-900">
    <canvas id="particles" style="width: 100%; height: 100%; display: block;"></canvas>
  </div>
</div>

<main class="relative w-full overflow-x-hidden">
  <div class="w-full overflow-hidden">
    <!-- Botón de modo oscuro/claro (se agregará funcionalidad con JavaScript) -->
    <button id="theme-toggle" type="button" class="fixed top-4 right-4 z-50 p-2 rounded-lg bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 hover:bg-gray-700/50 transition-colors duration-200" aria-label="Toggle dark mode">
      <svg id="theme-toggle-dark-icon" class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
      </svg>
      <svg id="theme-toggle-light-icon" class="w-5 h-5 hidden text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
      </svg>
    </button>
    
    <!-- Botón de chat de soporte flotante -->
    <div class="fixed bottom-8 right-8 z-40">
      <button id="support-chat" class="flex items-center justify-center w-14 h-14 rounded-full bg-indigo-600 hover:bg-indigo-700 text-white shadow-lg transform transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      </button>
    </div>

      <!-- Sección Hero - The Native Intelligent Web -->
      <section id="hero" class="relative py-24 md:py-32 lg:py-40 overflow-hidden bg-gradient-to-b from-gray-900 to-gray-950">
        <!-- Fondo con efecto de partículas -->
        <div class="absolute inset-0 bg-[radial-gradient(#2d3748_1px,transparent_1px)] [background-size:16px_16px] opacity-10"></div>
        
        <!-- Gradiente decorativo -->
        <div class="absolute -top-1/2 left-1/2 -translate-x-1/2 w-full max-w-4xl h-[800px] bg-gradient-to-br from-indigo-500/10 via-purple-500/5 to-pink-500/10 rounded-full blur-3xl"></div>
        
        <div class="relative max-w-7xl mx-auto px-6 sm:px-8">
          <div class="text-center">
            <!-- Launch Badge -->
            <div class="inline-flex items-center px-4 py-1.5 rounded-full text-sm font-medium bg-indigo-500/10 text-indigo-300 border border-indigo-500/20 mb-6">
              <span class="relative flex h-2 w-2 mr-2">
                <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-indigo-400 opacity-75"></span>
                <span class="relative inline-flex rounded-full h-2 w-2 bg-indigo-500"></span>
              </span>
              The First Native Intelligent Web
            </div>
            
            <!-- Main Title -->
            <h1 class="text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight">
              <span class="bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 via-purple-400 to-pink-400">
                The Native Intelligent Web
              </span>
            </h1>
            
            <!-- Subtitle -->
            <p class="text-xl md:text-2xl text-gray-300 max-w-4xl mx-auto mb-10 leading-relaxed">
              A fundamental reimagining of the internet where <span class="font-semibold text-white">intelligence is native</span>, not bolted on. Acratos enables <span class="font-semibold text-white">sovereign agents</span> to collaborate at internet scale, creating an emergent intelligence that benefits all participants.
            </p>
            
            <!-- Network Stats -->
            <div class="flex flex-wrap justify-center gap-6 mb-12">
              <div class="text-center">
                <div class="text-4xl font-bold text-white mb-1">Native</div>
                <div class="text-sm text-gray-400">AI Layer</div>
              </div>
              <div class="h-12 w-px bg-gray-700"></div>
              <div class="text-center">
                <div class="text-4xl font-bold text-white mb-1">Sovereign</div>
                <div class="text-sm text-gray-400">Agents</div>
              </div>
              <div class="h-12 w-px bg-gray-700"></div>
              <div class="text-center">
                <div class="text-4xl font-bold text-white mb-1">Decentralized</div>
                <div class="text-sm text-gray-400">Intelligence</div>
              </div>
            </div>
            
            <!-- Llamados a la acción -->
            <div class="flex flex-col sm:flex-row justify-center gap-4 max-w-md mx-auto">
              <a href="#get-started" class="px-8 py-4 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white font-medium rounded-full transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-indigo-500/30 flex items-center justify-center">
                Experience the Future Web
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 -mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
              <a href="#why-acratos" class="px-8 py-4 bg-gray-800/50 hover:bg-gray-700/50 border border-gray-700/50 hover:border-indigo-500/30 text-white font-medium rounded-full transition-all duration-300 transform hover:-translate-y-1 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                </svg>
                How It Works
              </a>
            </div>
            
            <!-- Trust indicators -->
            <div class="mt-12 pt-8 border-t border-gray-800/50">
              <p class="text-sm text-gray-500 mb-4">The foundation of the Native Intelligent Web</p>
              <div class="flex flex-wrap justify-center items-center gap-6 opacity-80 hover:opacity-100 transition-opacity">
                <div class="text-xl font-bold text-white">Native Intelligence Layer</div>
                <div class="text-2xl font-bold text-white">•</div>
                <div class="text-xl font-bold text-white">Decentralized Reasoning</div>
                <div class="text-2xl font-bold text-white">•</div>
                <div class="text-xl font-bold text-white">Agent Economy</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Sección Why Acratos -->
      <WhyAcratos />

      <!-- Sección de Introducción -->
      <section id="introduction" class="relative py-24 overflow-hidden">
        <div class="absolute inset-0 bg-[radial-gradient(#2d3748_1px,transparent_1px)] [background-size:16px_16px] opacity-10"></div>
        
        <!-- Gradiente decorativo -->
        <div class="absolute -top-1/2 left-1/2 -translate-x-1/2 w-full max-w-4xl h-[800px] bg-gradient-to-br from-indigo-500/10 to-purple-500/10 rounded-full blur-3xl"></div>
        
        <div class="relative max-w-6xl mx-auto px-6">
          <div class="text-center mb-16">
            <span class="inline-block px-4 py-1.5 text-sm font-medium text-indigo-300 bg-indigo-900/30 rounded-full mb-4 border border-indigo-800/50">Vision</span>
            <h2 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6">
              <span class="bg-clip-text text-transparent bg-gradient-to-r from-indigo-300 via-purple-300 to-pink-300">
                The First Native Intelligent Web
              </span>
            </h2>
            <div class="w-24 h-1 bg-gradient-to-r from-indigo-500 to-purple-500 mx-auto rounded-full mb-8"></div>
            <p class="text-xl text-gray-300 max-w-4xl mx-auto leading-relaxed">
              Acratos is not just another decentralized network—it's a fundamental reimagining of the internet where <span class="font-semibold text-white">intelligence is native</span>, <span class="font-semibold text-white">sovereignty is built-in</span>, and <span class="font-semibold text-white">value flows directly to creators</span>.
            </p>
          </div>
          
          <div class="relative z-10">
            <Introduction />
          </div>
        </div>
      </section>

      <!-- Sección de Casos de Uso -->
      <UseCases />

      <!-- Sección de Características -->
      <section id="features" class="relative py-24 overflow-hidden">
        <!-- Fondo con patrón de puntos -->
        <div class="absolute inset-0 bg-[radial-gradient(#2d3748_1px,transparent_1px)] [background-size:16px_16px] opacity-10"></div>
        
        <!-- Gradientes decorativos -->
        <div class="absolute -top-32 -right-32 w-64 h-64 bg-purple-600/20 rounded-full mix-blend-multiply filter blur-3xl opacity-70"></div>
        <div class="absolute -bottom-32 -left-32 w-64 h-64 bg-indigo-600/20 rounded-full mix-blend-multiply filter blur-3xl opacity-70"></div>
        
        <div class="relative max-w-7xl mx-auto px-6 sm:px-8">
          <div class="text-center mb-20">
            <span class="inline-block bg-indigo-500/10 text-indigo-400 text-sm font-medium px-4 py-1.5 rounded-full mb-4">The Native Intelligent Web</span>
            <h2 class="text-4xl md:text-5xl font-bold text-white mb-6">
              <span class="bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 via-purple-400 to-pink-400">
                Intelligence as Infrastructure
              </span>
            </h2>
            <div class="w-24 h-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 mx-auto rounded-full"></div>
            <p class="mt-8 max-w-3xl mx-auto text-xl text-gray-400">
              A fundamental rearchitecting of the internet where intelligence is native, sovereign agents are first-class citizens, and value flows directly to creators
            </p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature: {title: string; description: string; icon: string}, index: number) => {
              // Gradients for each card
              const gradients = [
                'from-indigo-500/5 to-purple-500/5',
                'from-purple-500/5 to-pink-500/5',
                'from-pink-500/5 to-indigo-500/5',
                'from-blue-500/5 to-cyan-500/5',
                'from-amber-500/5 to-orange-500/5',
                'from-emerald-500/5 to-teal-500/5'
              ] as const;
              
              const borderGradients = [
                'indigo-500/20',
                'purple-500/20',
                'pink-500/20',
                'blue-500/20',
                'amber-500/20',
                'emerald-500/20'
              ] as const;
              
              const iconGradients = [
                'from-indigo-500 to-purple-600',
                'from-purple-500 to-pink-600',
                'from-pink-500 to-rose-600',
                'from-blue-500 to-cyan-600',
                'from-amber-500 to-orange-600',
                'from-emerald-500 to-teal-600'
              ] as const;
              
              const gradientIndex = index % gradients.length;
              const borderGradientIndex = index % borderGradients.length;
              const iconGradientIndex = index % iconGradients.length;
              
              const gradientClass = gradients[gradientIndex];
              const borderColorClass = `border-${borderGradients[borderGradientIndex]}`;
              const iconGradientClass = iconGradients[iconGradientIndex];
              
              return (
                <div 
                  data-key={`feature-${index}`}
                  class={`group relative backdrop-blur-sm p-8 rounded-2xl border ${borderColorClass} transition-all duration-500 hover:shadow-2xl hover:shadow-indigo-500/10 hover:-translate-y-2 overflow-hidden bg-gradient-to-br ${gradientClass}`}
                >
                  <div class="relative z-10">
                    <div 
                      class={`w-16 h-16 rounded-xl flex items-center justify-center text-3xl mb-6 shadow-lg bg-gradient-to-br ${iconGradientClass}`}
                    >
                      {feature.icon}
                    </div>
                    <h3 class="text-2xl font-bold text-white mb-4">{feature.title}</h3>
                    <p class="text-gray-400 leading-relaxed">{feature.description}</p>
                    <div class="mt-6">
                      <span class="inline-flex items-center text-sm font-medium text-indigo-400 group-hover:text-indigo-300 transition-colors">
                        Learn more
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </span>
                    </div>
                  </div>
                  
                  {/* Hover effect */}
                  <div class="absolute inset-0 bg-gradient-to-br from-white/0 via-white/5 to-white/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                </div>
              );
            })}
          </div>
          
          <div class="mt-16 text-center">
            <a href="#architecture" class="inline-flex items-center px-8 py-3.5 border border-transparent text-base font-medium rounded-full text-white bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 shadow-lg hover:shadow-indigo-500/30 transition-all duration-300 transform hover:-translate-y-1">
              Explore Architecture
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
              </svg>
            </a>
          </div>
        </div>
      </section>

      <!-- Sección de Arquitectura (contenido completo en el componente Architecture) -->
      <div id="architecture" class="prose prose-invert max-w-none text-lg">
        <Architecture />
      </div>
          <div class="mt-16 text-center">
            <a href="#economy" class="inline-flex items-center px-8 py-3.5 border border-transparent text-base font-medium rounded-full text-white bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 shadow-lg hover:shadow-blue-500/30 transition-all duration-300 transform hover:-translate-y-1">
              Explorar Economía
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
              </svg>
            </a>
          </div>
      
      <!-- Sección de Economía (contenido completo en el componente Economy) -->
      <div id="economy" class="prose prose-invert max-w-none text-lg">
        <Economy />
      </div>

      <!-- Sección de Gobernanza (contenido completo en el componente Governance) -->
      <div id="governance" class="bg-gradient-to-b from-gray-900 to-gray-900/95">
        <Governance />
      </div>

      <!-- Sección de Hoja de Ruta -->
      <Roadmap />
</main>
    
    <!-- Botón de volver arriba -->
    <button id="backToTop" class="fixed bottom-24 right-8 w-12 h-12 rounded-full bg-white/10 backdrop-blur-sm border border-gray-700/50 shadow-lg flex items-center justify-center text-white hover:bg-white/20 transition-colors duration-200 opacity-0 invisible transform translate-y-4 transition-all duration-300 z-30">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
      </svg>
    </button>

    <script>
      // Toggle theme
      const themeToggleBtn = document.getElementById('theme-toggle');
      const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
      const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

      // Verificar que los elementos existen antes de usarlos
      if (themeToggleBtn && themeToggleDarkIcon && themeToggleLightIcon) {
        // Change the icons inside the button based on previous settings
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          themeToggleLightIcon.classList.remove('hidden');
        } else {
          themeToggleDarkIcon.classList.remove('hidden');
        }

        themeToggleBtn.addEventListener('click', function() {
          // Toggle icons
          themeToggleDarkIcon.classList.toggle('hidden');
          themeToggleLightIcon.classList.toggle('hidden');

          // If is set in localStorage
          if (localStorage.getItem('color-theme')) {
            // If light, make dark and save in localStorage
            if (localStorage.getItem('color-theme') === 'light') {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
            } else {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
            }
          } else {
            // If not in localStorage
            if (document.documentElement.classList.contains('dark')) {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('color-theme', 'light');
            } else {
              document.documentElement.classList.add('dark');
              localStorage.setItem('color-theme', 'dark');
            }
          }
        });
      }

      // Botón de soporte
      const supportBtn = document.getElementById('support-chat');
      if (supportBtn) {
        supportBtn.addEventListener('click', () => {
          // Aquí iría la lógica para abrir el chat de soporte
          // Por ahora, mostramos un alert
          alert('¡Próximamente disponible! Estamos trabajando en nuestro sistema de soporte en vivo.');
        });
      }

      // Código del carrusel eliminado
      
      // Botón de volver arriba
      const backToTopBtn = document.getElementById('backToTop');
      if (backToTopBtn) {
        window.addEventListener('scroll', () => {
          const isVisible = window.pageYOffset > 300;
          backToTopBtn.classList.toggle('opacity-0', !isVisible);
          backToTopBtn.classList.toggle('invisible', !isVisible);
          backToTopBtn.classList.toggle('translate-y-4', !isVisible);
          backToTopBtn.classList.toggle('opacity-100', isVisible);
          backToTopBtn.classList.toggle('visible', isVisible);
          backToTopBtn.classList.toggle('translate-y-0', isVisible);
        });
        
        backToTopBtn.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
      }
      
      // Animaciones al hacer scroll
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fadeInUp');
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
      
      document.querySelectorAll('.fade-in-up').forEach(el => observer.observe(el));
      
      // Botón de volver arriba
      window.addEventListener('scroll', () => {
        // Back to top button visibility
        const backToTop = document.getElementById('back-to-top');
        
        if (backToTop) {
          // Type assertion para el botón
          const backToTopButton = backToTop as HTMLElement;
          
          window.addEventListener('scroll', () => {
            if (!backToTopButton) return;
            
            if (window.scrollY > 300) {
              backToTopButton.classList.remove('opacity-0', 'invisible');
              backToTopButton.classList.add('opacity-100', 'visible');
            } else {
              backToTopButton.classList.remove('opacity-100', 'visible');
              backToTopButton.classList.add('opacity-0', 'invisible');
            }
          });

          // Smooth scroll to top
          backToTopButton.addEventListener('click', (e) => {
            e.preventDefault();
            window.scrollTo({
              top: 0,
              behavior: 'smooth' as ScrollBehavior
            });
          });
        }

        // Particle background
        const canvas = document.getElementById('particles');
        
        if (canvas instanceof HTMLCanvasElement) {
          const ctx = canvas.getContext('2d');
          
          if (ctx) {
            // Set canvas size
            function resizeCanvas() {
              if (!(canvas instanceof HTMLCanvasElement)) return;
              
              const width = window.innerWidth;
              const height = window.innerHeight;
              
              // Set canvas dimensions directly
              canvas.width = width;
              canvas.height = height;
              
              // Set canvas display size
              canvas.style.width = `${width}px`;
              canvas.style.height = `${height}px`;
            }
            
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Particle system implementation...
            const particles: { x: number; y: number; size: number; speedX: number; speedY: number }[] = [];
            const particleCount = 50;
            
            // Initialize particles
            for (let i = 0; i < particleCount; i++) {
              particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                size: Math.random() * 3 + 1,
                speedX: Math.random() * 1 - 0.5,
                speedY: Math.random() * 1 - 0.5
              });
            }
            
            // Animation loop
            function animate() {
              if (!(canvas instanceof HTMLCanvasElement) || !ctx) return;
              
              // Clear canvas
              ctx.clearRect(0, 0, canvas.width, canvas.height);
              
              // Update and draw particles
              particles.forEach(particle => {
                // Update position
                particle.x += particle.speedX;
                particle.y += particle.speedY;
                
                // Bounce off edges
                if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;
                if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;
                
                // Draw particle
                ctx.fillStyle = 'rgba(99, 102, 241, 0.8)';
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
              });
              
              requestAnimationFrame(animate);
            }
            
            animate();
          }
        }        
      });
    </script>
  </MainLayout>
